df_count <- as.data.frame(df_count)
# odds ratios
log_or_store[i] <-  log( ( sum(df_c ount[ df_count$cancer == 1, "n"] )/ sum(df_count[df_count$cancer == 0, "n"] )  ) / ( sum(df_count[df_count$mutated == 1, "n"]) / sum(df_count[df_count$mutated == 0, "n"] ) ) )
if(i %% 100 == 0){
cat(i)
}
}
n <- sample(300:400, 1)
number <- runif(n,0,1)
cancer <- as.numeric(number < 0.08)
number <- runif(n, 0, 1)
mutated <- as.numeric(number < 0.39)
df <- cbind.data.frame(cancer, mutated)
df_count <- df %>%
group_by(cancer, mutated) %>%
count()
df_count <- as.data.frame(df_count)
log_or_store[i] <-  log( ( sum(df_c ount[ df_count$cancer == 1, "n"] )/ sum(df_count[df_count$cancer == 0, "n"] )  ) / ( sum(df_count[df_count$mutated == 1, "n"]) / sum(df_count[df_count$mutated == 0, "n"] ) ) )
log_or_store[i]
i <- 1
for(i in 1:1000){
n <- sample(300:400, 1)
number <- runif(n,0,1)
cancer <- as.numeric(number < 0.08)
number <- runif(n, 0, 1)
mutated <- as.numeric(number < 0.39)
df <- cbind.data.frame(cancer, mutated)
df_count <- df %>%
group_by(cancer, mutated) %>%
count()
df_count <- as.data.frame(df_count)
# odds ratios
log_or_store[i] <-  log( ( sum(df_count[ df_count$cancer == 1, "n"] )/ sum(df_count[df_count$cancer == 0, "n"] )  ) / ( sum(df_count[df_count$mutated == 1, "n"]) / sum(df_count[df_count$mutated == 0, "n"] ) ) )
if(i %% 100 == 0){
cat(i)
}
}
hist(log_or_store)
for(i in 1:1000){
n <- sample(300:400, 1)
number <- runif(n,0,1)
cancer <- as.numeric(number < 0.08)
number <- runif(n, 0, 1)
mutated <- as.numeric(number < 0.39)
df <- cbind.data.frame(cancer, mutated)
df_count <- df %>%
group_by(cancer, mutated) %>%
count()
df_count <- as.data.frame(df_count)
# odds ratios
log_or_store[i] <-  log( ( sum(df_count[ df_count$cancer == 0, "n"] )/ sum(df_count[df_count$cancer == 1, "n"] )  ) / ( sum(df_count[df_count$mutated == 0, "n"]) / sum(df_count[df_count$mutated == 1, "n"] ) ) )
if(i %% 100 == 0){
cat(i)
}
}
hist(log_or_store)
shiny::runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
library(MASS)
runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
shiny::runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
View(X)
scenario <- seq(from = min(X[, 4]), to = max(X[,4], length.out = 100))
scenario
min(X[, 4])
max(X[,4])
scenarios <- seq(from = min(X[, 4]), to = max(X[,4]), length.out = 10)
scenarios
scenario1_min <- min(X[, 4])
scenario1_max <- max(X[,4])
scenario1_step <- 10
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
S <- mvrnorm(nsim, coef, vcov)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
scenario1
X <- X
K <- ncol(X)
k <- ncol(X)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases
cases[,,] <- X
cases[,,1]
cases[,,2]
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
for(scenario in 1:length(scenario1)){
cases[,,scenario] <- scenario1[scenario]
}
cases[,,scenario]
names(X)
colnames(X)
name_var1 <- "Av.Coffees per day"
sel <- which(ncol(X) == name_var1)
sel
name_var1
colnames(X)
sel <- which(colnames(X) == name_var1)
sel
name_var1
colnames(X)
name_var1
name_var1 <- "Av. Coffees per day"
sel <- which(colnames(X) == name_var1)
sel
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
}
sel
cases[,sel,scenario]
cases[,, scenario]
ev <- cases[,, scenario] %*% coef
ev
ev <- t(cases[,, scenario]) %*% coef
cases[,, scenario]
coef
coef
15 Ãœ 0.3292
coef * cases[1,,scenario]
sum(coef * cases[1,,scenario])
View(ev)
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upper, length(scenario1)[scenario])
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
ev <- cases[,, scenario] %*% coef
mean <- mean(ev)
lwr <- quantile(ev, 0.025)
upr <- quantile(ev, 0.975)
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upper, length(scenario1)[scenario])
}
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts,
character.only = FALSE, mask.ok, exclude, include.only,
attach.required = missing(include.only))
require(MASS)
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
ev <- cases[,, scenario] %*% coef
mean <- mean(ev)
lwr <- quantile(ev, 0.025)
upr <- quantile(ev, 0.975)
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upr, length(scenario1)[scenario])
}
scen_df
scenario1[scenario]
require(MASS)
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
ev <- cases[,, scenario] %*% coef
mean <- mean(ev)
lwr <- quantile(ev, 0.025)
upr <- quantile(ev, 0.975)
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upr, scenario1[scenario])
}
scen_df
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = as.data.frame(X),
aes(x = name_var1,
y = `Productivity Index`))
df <- plot_data
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes(x = name_var1,
y = `Productivity Index`))
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")
name_var1
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes(x = name_var1,
y = `Productivity Index`))
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1,
y = "Productivity Index"))
name_var1 <- paste0("`", name_var1, "`")
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1,
y = "Productivity Index"))
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
name_var1_gg <- paste0("`", name_var1, "`")
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
name_var1_gg
name_var1
name_var1 <- "Av. Coffees per day"
name_var1_gg <- paste0("`", name_var1, "`")
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
colnames(X)
name_var1 <- "Surname Length"
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
ev <- cases[,, scenario] %*% coef
mean <- mean(ev)
lwr <- quantile(ev, 0.025)
upr <- quantile(ev, 0.975)
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upr, scenario1[scenario])
}
return(scen_df)
name_var1_gg <- paste0("`", name_var1, "`")
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
scenario1_min
scenario1_max
coef <- model$reg_out$Coefficients
vcov <- model$VarCov
nsim <- 1000
name_var1 <- "Surname Length"
scenario1_min <- min(X[, name_var1])
scenario1_max <- max(X[,name_var1])
scenario1_step <- 10
X <- X
df <- plot_data
S <- mvrnorm(nsim, coef, vcov)
k <- ncol(X)
scenario1 <- seq(from = scenario1_min, to = scenario1_max, length.out = scenario1_step)
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
ev <- cases[,, scenario] %*% coef
mean <- mean(ev)
lwr <- quantile(ev, 0.025)
upr <- quantile(ev, 0.975)
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upr, scenario1[scenario])
}
return(scen_df)
name_var1_gg <- paste0("`", name_var1, "`")
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
ev
mean
lwr
upr
ev
hist(ev)
scenario
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
quantile(ev, 0.025)
quantile(ev, 0.975)
lwr <- mean - 1.96 * sd(ev)
lwr
cases <- array(NA, dim = c(nrow(X), k, length(scenario1)))
cases[,,] <- X
scen_df <- data.frame(mean = numeric(),
lwr = numeric(),
upr = numeric(),
scenario = numeric())
for(scenario in 1:length(scenario1)){
sel <- which(colnames(X) == name_var1)
cases[,sel,scenario] <- scenario1[scenario]
ev <- cases[,, scenario] %*% coef
mean <- mean(ev)
lwr <- mean - 1.96 * sd(ev)
upr <- mean + 1.96 * sd(ev)
scen_df[scenario,] <- cbind.data.frame(mean, lwr, upr, scenario1[scenario])
}
name_var1_gg <- paste0("`", name_var1, "`")
ggplot(data = scen_df,
aes(x = scenario,
y = mean))+
geom_line()+
geom_line(aes(y = lwr),linetype = "dashed")+
geom_line(aes(y = upr), linetype = "dashed")+
geom_point(data = plot_data,
aes_string(x = name_var1_gg,
y = "`Productivity Index`"))
ggplot(data = plot_data, aes(x = `Av. Coffees per day`,
y = `Productivity Index`))+
geom_point()
mean(plot_data$`Av. Coffees per day`)
hist(plot_data$`Av. Coffees per day`)
mean_coffee
rtruncnorm(n, mean_coffee, 9, a = 0 )
hist(rtruncnorm(n, mean_coffee, 9, a = 0 ))
9
`Av. Coffees per day` = c(round(rtruncnorm(n, mean_coffee, 9, a = 0 ), 1), 3.2),
rtruncnorm(n, mean_coffee, 9, a = 0 )
lol <- (rtruncnorm(n, mean_coffee, 9, a = 0 )
hist(lol)
lol <- round(rtruncnorm(n, mean_coffee, 9, a = 0 )
)
hist(lol)
lol <- round(rtruncnorm(n, mean_coffee, 9, a = 0 )
)
hist(lol)
lol <- rtruncnorm(n, mean_coffee, 9, a = 0 )
hist(lol)
lol <- rtruncnorm(n, mean = mean_coffee, sd = 9, a = 0 )
hist(lol)
lol <- rtruncnorm(n, mean = mean_coffee, sd = 4, a = 0 )
hist(lol)
lol <- rtruncnorm(n, mean = mean_coffee, sd = 2, a = 0 )
hist(lol)
rbinom(n, 1, 0.7 )
plot_data <- data.frame(Name = randomNames(n = n,
gender = gender,
which.names = "both",
name.order = "last.first")) %>%
mutate(Gender = gender) %>%
add_row(Name = "Hienstorfer-Heitmann, Mio", Gender = "male") %>%
mutate(`Surname Length` = str_count(gsub("[- ]", "", str_extract(Name, "^.+?(?=,)"))),
Age = c(round(rnorm(n, 55, 10), 0), 29),
`Av. Coffees per day` = c(rbinom(n, 1, 0.7 ), 3.2),
`Av. Coffees per day` = `Av. Coffees per day` *  c(rtruncnorm(n, mean_coffee, 9, a = 0 ), 3.2),
`Delayed Gratification` = rbinom(n + 1, 1, 0.3),
IQ = c(rnorm(n, 100, 15), 99 ),
`eats Breakfast` = c(rbinom(n, 1, 0.75), 1),
`Productivity Index` = 2.5 +
0.3 * `Surname Length`+
0.2 * (- (`Av. Coffees per day` - mean_coffee) ^ 2 + ( ( max(`Av. Coffees per day`) - mean_coffee ) ^2 ) ) +
0.0001585 * `Delayed Gratification`+
0.00000245 * IQ +
0.25 * `eats Breakfast` +
0.00048 * Age +
rnorm(n + 1, 0, 1),# error term
`Productivity Index` = case_when(Name == "Hienstorfer-Heitmann, Mio"~ 9,
TRUE ~ `Productivity Index`)
)
hist(plot_data$`Av. Coffees per day`)
plot_data <- data.frame(Name = randomNames(n = n,
gender = gender,
which.names = "both",
name.order = "last.first")) %>%
mutate(Gender = gender) %>%
add_row(Name = "Hienstorfer-Heitmann, Mio", Gender = "male") %>%
mutate(`Surname Length` = str_count(gsub("[- ]", "", str_extract(Name, "^.+?(?=,)"))),
Age = c(round(rnorm(n, 55, 10), 0), 29),
`Av. Coffees per day` = c(rbinom(n, 1, 0.7 ), 3.2),
`Av. Coffees per day` = `Av. Coffees per day` *  c(rtruncnorm(n, mean = mean_coffee, sd = 2, a = 0 ), 3.2),
`Delayed Gratification` = rbinom(n + 1, 1, 0.3),
IQ = c(rnorm(n, 100, 15), 99 ),
`eats Breakfast` = c(rbinom(n, 1, 0.75), 1),
`Productivity Index` = 2.5 +
0.3 * `Surname Length`+
0.2 * (- (`Av. Coffees per day` - mean_coffee) ^ 2 + ( ( max(`Av. Coffees per day`) - mean_coffee ) ^2 ) ) +
0.0001585 * `Delayed Gratification`+
0.00000245 * IQ +
0.25 * `eats Breakfast` +
0.00048 * Age +
rnorm(n + 1, 0, 1),# error term
`Productivity Index` = case_when(Name == "Hienstorfer-Heitmann, Mio"~ 9,
TRUE ~ `Productivity Index`)
)
hist(plot_data$`Av. Coffees per day`)
plot_data <- data.frame(Name = randomNames(n = n,
gender = gender,
which.names = "both",
name.order = "last.first")) %>%
mutate(Gender = gender) %>%
add_row(Name = "Hienstorfer-Heitmann, Mio", Gender = "male") %>%
mutate(`Surname Length` = str_count(gsub("[- ]", "", str_extract(Name, "^.+?(?=,)"))),
Age = c(round(rnorm(n, 55, 10), 0), 29),
`Av. Coffees per day` = c(rbinom(n, 1, 0.7 ), 3.2) *  c(rtruncnorm(n, mean = mean_coffee, sd = 2, a = 0 ), 3.2),
`Delayed Gratification` = rbinom(n + 1, 1, 0.3),
IQ = c(rnorm(n, 100, 15), 99 ),
`eats Breakfast` = c(rbinom(n, 1, 0.75), 1),
`Productivity Index` = 2.5 +
0.3 * `Surname Length`+
0.2 * (- (`Av. Coffees per day` - mean_coffee) ^ 2 + ( ( max(`Av. Coffees per day`) - mean_coffee ) ^2 ) ) +
0.0001585 * `Delayed Gratification`+
0.00000245 * IQ +
0.25 * `eats Breakfast` +
0.00048 * Age +
rnorm(n + 1, 0, 1),# error term
`Productivity Index` = case_when(Name == "Hienstorfer-Heitmann, Mio"~ 9,
TRUE ~ `Productivity Index`)
)
hist(plot_data$`Av. Coffees per day`)
runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
shiny::runApp('Github/HieHei_Showoff_Dashboard/HieHeiShowoff')
